<?php

namespace app\models\publications;

// project classes
use app\interfaces\PublicationInterface;
// yii classes
use app\models\publications\traits\PublicationTrait;
use app\models\publications\traits\SchemeTrait;
use yii\db\ActiveRecord;

/**
 * Class Publication
 */
abstract class Publication extends ActiveRecord implements PublicationInterface
{

    use PublicationTrait;
    use SchemeTrait;

    public $language;

    public function attributeLabels()
    {
        return parent::attributeLabels(); // TODO: Change the autogenerated stub
    } // end function


    /**
     * sets flash messages using Alert widget (yii2)
     *
     * @param bool $insert
     * @return bool
     */
    public function beforeSave($insert)
    {
        if (parent::beforeSave($insert)) {

            if ($this->isNewRecord) {
                if ($insert) {
                    Yii::$app->session->setFlash('success', 'Статья сохранена');
                    return true;
                } else {
                    Yii::$app->session->setFlash('danger', 'Сохранение не удалось');
                    return false;
                }
            } else {
                if ($insert) {
                    Yii::$app->session->setFlash('danger', 'Обновление данных не удалось');
                    return false;
                } else {
                    Yii::$app->session->setFlash('success', 'Данные обновлены');
                    return true;
                }
            }
        }

        return true;
    } // end function


    /**
     * @param bool $insert
     * @param array $changedAttributes
     */
    public function afterSave($insert, $changedAttributes)
    {
        parent::afterSave($insert, $changedAttributes);

        // saving language
        $newlanguage = new Languages();
        $newlanguage->language = strtolower($this->language);
        $newlanguage->save();
    } // end function


    /**
     * uses SchemeTrait deleteLinkedData() method
     *
     * @inheritdoc
     */
    public function afterDelete()
    {
        parent::afterDelete();
        $this->deleteLinkedData();
    } // end function

} // end class
